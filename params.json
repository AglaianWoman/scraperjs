{"name":"Scraperjs","tagline":"A complete and versatile web scraper.","body":"# Scraperjs\r\n[![Build Status](https://travis-ci.org/ruipgil/scraperjs.svg?branch=master)](https://travis-ci.org/ruipgil/scraperjs) [![Dependency Status](https://gemnasium.com/ruipgil/scraperjs.svg)](https://gemnasium.com/ruipgil/scraperjs) [![Coverage Status](https://coveralls.io/repos/ruipgil/scraperjs/badge.png)](https://coveralls.io/r/ruipgil/scraperjs) [![NPM version](https://badge.fury.io/js/scraperjs.svg)](http://badge.fury.io/js/scraperjs)\r\n\r\nScraperjs is a web scraper module that make scraping the web an easy job.\r\n\r\n## Installing\r\n\r\n```\r\nnpm install scraperjs\r\n```\r\n\r\nIf you would like to test (this is optional and requires the installation with the ``` --save-dev ``` tag),\r\n```\r\ngrunt test\r\n```\r\n\r\n# Getting started\r\n\r\nScraperjs exposes two different scrapers,\r\n+ a **SimpleScraper**, that is light fast and with a low footprint, however it doesn't allow for more complex situations, like scraping dynamic content.\r\n+ a **DynamicScraper**, that is a bit more heavy, but allows you to scrape dynamic content, like in the browser console.\r\nboth scrapers expose a *very* similar API, with some minor differences when it comes to scraping.\r\n\r\n## Lets scrape [Hacker News](https://news.ycombinator.com/), with both scrapers.\r\n\r\nTry to spot the differences.\r\n\r\n### Static Scraper\r\n\r\n```javascript\r\nvar scraperjs = require('scraperjs');\r\nscraperjs.StaticScraper.create('https://news.ycombinator.com/')\r\n\t.scrape(function($) {\r\n\t\treturn $(\".title a\").map(function() {\r\n\t\t\treturn $(this).text();\r\n\t\t}).get();\r\n\t}, function(news) {\r\n\t\tconsole.log(news);\r\n\t})\r\n```\r\n\r\nThe ```scrape``` promise receives two functions, the first will scrape the page and return the result. The second will receive the result of the scraping.\r\nThis scraper function only receives jQuery a parameter to scrape the page. Still, very powerful. It uses [cheerio](https://github.com/cheeriojs/cheerio) to do the magic behind the scenes.\r\n\r\n### Dynamic Scraper\r\n\r\n```javascript\r\nvar scraperjs = require('scraperjs');\r\nscraperjs.DynamicScraper.create('https://news.ycombinator.com/')\r\n\t.scrape(function() {\r\n\t\treturn $(\".title a\").map(function() {\r\n\t\t\treturn $(this).text();\r\n\t\t}).get();\r\n\t}, function(news) {\r\n\t\tconsole.log(news);\r\n\t})\r\n```\r\n\r\nAgain, the ```scrape``` promise receives two functions, the only difference is that, because we're using a dynamic scraper, the scraping function is [sandboxed](https://github.com/sgentle/phantomjs-node/wiki#evaluating-pages) only with the page scope, so **no closures(!)**. This means that in *this* (and only in this) scraper you can't call a function that has not been defined inside the scraping function. Also, the result of the scraping function must be [JSON-serializable](https://github.com/sgentle/phantomjs-node/wiki#evaluating-pages).\r\nWe use [phantom](https://github.com/sgentle/phantomjs-node) and [phantomjs](https://github.com/ariya/phantomjs) to make it happen, we also inject jQuery for you.\r\n\r\n## Show me the way! (aka Routes)\r\n\r\nFor a more flexible scraping and crawling of the web sometimes we need to go through multiple web sites and we don't want map every possible url format. For that scraperjs provides the Router class.\r\n\r\n### Example\r\n\r\n```javascript\r\nvar scraperjs = require('scraperjs'),\r\n\trouter = new scraperjs.Router();\r\n\r\nrouter\r\n\t.otherwise(function(url) {\r\n\tconsole.log(\"Url '\"+url+\"' couldn't be routed.\");\r\n});\r\n\r\nvar path = {};\r\n\r\nrouter.on('https?://(www.)?youtube.com/watch/:id')\r\n\t.createStatic()\r\n\t.scrape(function($) {\r\n\t\treturn $(\"a\").map(function() {\r\n\t\t\treturn $(this).attr(\"href\");\r\n\t\t}).get();\r\n\t}, function(links, utils) {\r\n\t\tpath[utils.params.id] = links\r\n\t})\r\n\r\nrouter.route(\"https://www.youtube.com/watch/YE7VzlLtp-4\", function() {\r\n\tconsole.log(\"i'm done\");\r\n});\r\n```\r\n\r\nCode that allows for parameters in paths is from the project [Routes.js](https://github.com/aaronblohowiak/routes.js), information about the [path formating](https://github.com/aaronblohowiak/routes.js#path-formats) is there too.\r\n\r\n# API overview\r\n\r\nScraperjs uses promises whenever possible.\r\n\r\n#### StaticScraper, DynamicScraper and ScraperPromise\r\n\r\nSo, the scrapers should be used with the ScraperPromise. By creating a scraper\r\n```javascript\r\nvar scraperPromise = scraperjs.StaticScraper.create() // or DynamicScraper\r\n```\r\nThe following promises can be made over it, they all return a scraper promise,\r\n+ ```onStatusCode(code:number, callback:function(utils))```, executes the callback when the status code is equal to the code,\r\n+ ```onStatusCode(callback:function(code:number, utils))```, executes the callback when receives the status code. The callback receives the current status code,\r\n+ ```delay(time:number, callback:function(utils))```, delays the execution of the chain by time milliseconds,\r\n+ ```timeout(time:number, callback:function(utils))```, executes the callback function after time milliseconds,\r\n+ ```then(callback:function(utils))```, executes the callback after the last promise,\r\n+ ```async(callback:function(done, utils))```, executes the callback, stopping the promise chain, resuming it when the ```done``` function is called,\r\n+ ```onError(callback:function(utils))```, executes the callback when there was an error, errors block the execution of the chain even if the promise was not defined,\r\n+ ```done(callback:function(utils))```, executes the callback at the end of the promise chain, this is always executed, even if there was an error,\r\n+ ```get(url:string)```, makes a simple HTTP GET request to the url. This promise should be used only once per scraper.\r\n+ ```request(options:Object)```, makes a (possibly) more complex HTTP request, scraperjs uses the [request](https://github.com/mikeal/request) module, and this method is a simple wrapper of ```request.request()```. This promise should be used only once per scraper.\r\n+ ```use(ScraperPromise)```, uses a ScraperPromise already instantiated.\r\n+ ```scrape(scrapeFn:function(...?), callback:function(result:?, utils), ...?)```, scrapes the page. It executes the scrapeFn and passes it's result to the callback. When using the StaticScraper, the scrapeFn receives a jQuery function that is used to scrape the page. When using the DynamicScraper, the scrapeFn doesn't receive nothing and can only return a [JSON-serializable](https://github.com/sgentle/phantomjs-node/wiki#evaluating-pages) type. Optionally an arbitrary number of arguments can be passed to the scraping function.\r\n\r\nAll callback functions receive as their last parameter a utils object, with it the parameters of an url from a router can be accessed. Also the chain can be stopped.\r\n```javascript\r\nDynamicScraper.create()\r\n\t.get(\"http://news.ycombinator.com\")\r\n\t.then(function(utils) {\r\n\t\tutils.stop();\r\n\t\t// utils.params.paramName\r\n\t});\r\n```\r\n\r\nThe promise chain is fired with the same sequence it was declared, with the exception of the promises get and request that fire the chain when they've received a valid response, and the promises done and onError, which were explained above.\r\n\r\nYou can also waterfall values between promises by returning them (with the exception of the promise ```timeout```, that will always return ```undefined```) and it can be access through ```utils.lastReturn```.\r\n\r\n##### A more powerful DynamicScraper.\r\n\r\nWhen lots of instances of DynamicScraper are needed, it's creation gets really heavy on resources and takes a lot of time. To make this more lighter you can use a *factory*, that will create only one PhantomJS instance, and every DynamicScraper will request a page to work with. To use it you must start the factory before any DynamicSrcaper is created, ``` scraperjs.DynamicScraper.startFactory() ``` and then close the factory after the execution of your program, ``` scraperjs.DynamicScraper.closeFactory() ```.\r\nTo make the scraping function more robust you can inject code into the page,\r\n```js\r\nvar ds = scraperjs.DynamicScraper\r\n\t.create('http://news.ycombinator.com')\r\n\t.async(function(done, utils) {\r\n\t\tutils.scraper.inject(__dirname+'/path/to/code.js', function(err) {\r\n\t\t\t// in this case if there was an error won't fire onError promise.\r\n\t\t\tif(err) {\r\n\t\t\t\tutils.stop();\r\n\t\t\t} else {\r\n\t\t\t\tdone();\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\t.scrape(function() {\r\n\t\t\treturn functionInTheCodeInjected();\r\n\t\t}, function(result) {\r\n\t\t\tconsole.log(result);\r\n\t\t});\r\n```\r\n\r\n#### Router\r\n\r\nThe router should be initialized like a class\r\n```javascript\r\nvar router = new scraperjs.Router(options);\r\n```\r\n\r\nThe options object is optional, and these are the options:\r\n+ ``` firstMatch ```, a boolean, if true the routing will stop once the first path is matched, the default is false.\r\n\r\nThe following promises can be made over it,\r\n+ ```on(path:string|RegExp|function(url:string))```, makes the promise for the match url or regular expression, alternatively you can use a function to accept or not a passed url. The promises ```get``` or ```request``` and ```createStatic``` or ```createDynamic``` are expected after the on promise.\r\n+ ```get()```, makes so that the page matched will be requested with a simple HTTP request,\r\n+ ```request(options:Object)```, makes so that the page matched will be requested with a possible more complex HTTP request, , scraperjs uses the [request](https://github.com/mikeal/request) module, and this method is a simple wrapper of [request.request()](https://github.com/mikeal/request#requestoptions-callback),\r\n+ ```createStatic()```, associates a static scraper to use to scrape the matched page, this returns ScraperPromise, so any promise made from now on will be made over a ScraperPromise of a StaticScraper. Also the ```done``` promise of the scraper will not be available.\r\n+ ```createDynamic()```, associates a dynamic scraper to use to scrape the matched page, this returns ScraperPromise, so any promise made from now on will be made over a ScraperPromise of a DynamicScraper. Also the ```done``` promise of the scraper will not be available.\r\n+ ```route(url:string, callback:function(boolean))```, routes an url through all matched paths, calls the callback when it's executed, true is passed if the route was successful, false otherwise.\r\n+ ```otherwise(callback:function(url:string))```, executes the callback function if the routing url didn't match any path.\r\n+ ```onError(callback:function(url:string, error:Error))```, executes the callback when an error occurred on the routing scope, not on any scraper, for that situations you should use the ```onError``` promise of the scraper.\r\n\r\n#### More\r\n\r\nCheck the [examples](./doc/examples), the [tests](./test) or just dig into the code, it's well documented and it's simple to understand.\r\n\r\n# Dependencies\r\n\r\nAs mentioned above, scraperjs is uses some dependencies to do the the heavy work, such as\r\n+ [```async```](https://github.com/caolan/async), for flow control\r\n+ [```request```](https://github.com/mikeal/request), to make HTTP requests, again, if you want more complex requests see it's [documentation](https://github.com/mikeal/request#requestoptions-callback)\r\n+ [```phantom```](https://github.com/sgentle/phantomjs-node) + [```phantomjs```](https://github.com/ariya/phantomjs), phantom is an awesome module that links node to phantom, used in the DynamicScraper\r\n+ [```cheerio```](https://github.com/cheeriojs/cheerio), light and fast DOM manipulation, used to implement the StaticScraper\r\n+ [```jquery```](https://github.com/jquery/jquery), to include jquery in the DynamicScraper\r\n+ although [```Routes.js```](https://github.com/aaronblohowiak/routes.js) is great, scraperjs doesn't use it to maintain it's \"interface layout\", but the code to transform the path given on the on promise to regular expressions is from them\r\n\r\n# License\r\n\r\nThis project is under the [MIT](./LICENCE) license. \r\n","google":"UA-54125554-1","note":"Don't delete this file! It's used internally to help with page regeneration."}